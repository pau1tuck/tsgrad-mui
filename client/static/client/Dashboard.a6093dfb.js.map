{"version":3,"sources":["modules/Posts/index.tsx","modules/Dashboard/index.tsx"],"names":[],"mappings":";;;;;;;ACAA,ADAA;;ACCA,ADCA;;ACGA;;AAEA;;;;;;;;;ADHA,MAAM,KAAK,GAAG,MAAK;;;AACjB,QAAM;ACIR,ADJU,IAAA,ECIJ,EDJE,OCIO,GAAG,MAAK;AACrB,ADLc,IAAA,ICKR,CDLA,KCKM,GAAG,8BAAf;AACA,ADNqB,IAAA,ICMf,KAAK,GAAG,gBAAG;ADNX,MAA2B,6BAAjC;AAEA,QAAM,KAAK,GAAA,CAAA,EAAA,GAAG,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,KAAT,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,GAAF,CAAO,IAAD,iBAC7B,eAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,GAAG,EAAE,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE;AAAhB,GAAA,eACE,eAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAK,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,KAAX,CADF,eAEE,eAAA,aAAA,CAAA,GAAA,EAAA,IAAA,EACG,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,MAAN,CAAa,SADhB,KAAA,EAC4B,IAAI,CAAC,MAAL,CAAY,QADxC,CAFF,eAKE,eAAA,aAAA,CAAA,GAAA,EAAA,IAAA,EAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,SAAV,CALF,eAME,eAAA,aAAA,CAAA,GAAA,EAAA,IAAA,EAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,OAAV,CANF,CADuB,CAAzB;;AAWA,MAAI,OAAJ,EAAa;AACX,wBAAO,eAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAA,YAAA,CAAP;AACD;GCTD;AAUA,ADAA,MAAI,ECAE,GDAG,CCAC,GAAG,ADAA,CAAC,IAAd,CCAmB,CAAC,ADAA,SCAP,CAAiB;AAAE,ADC9B,ICD8B,ADC9B,OAAO,CAAC,GAAR,CAAY,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,OAAnB;ACD4B,ADE5B,GCFW,CAAb,oBDES,eAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAA,UAAA,CAAP;ACDF,ADEC,ECFD,OAAO,CAAC,GAAR,CAAY,gBAAgB,IAA5B;AACA,sBACE,eAAA,aAAA,CAAC,UAAD,EAAK,IAAL,eACE,eAAA,aAAA,CAAC,cAAD,EAAM,IAAN,CADF,CADF;AAKD,ADFC,CCjBF,qBDkBI,eAAA,aAAA,CAAA,KAAA,EAAA,IAAA,eACE,eAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CADF,eAEE,eAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,KAAN,CAFF,EAGG,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,KAAjB,CAHH,CADF;AAOD,CA7BD;cCKM,6CACW;cDNX,yDAC6B;iBCyBpB;iBDKA;;;;;;;;;;;0BC1BT;0BDLA","file":"Dashboard.a6093dfb.js","sourceRoot":"../../src","sourcesContent":["import React from \"react\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { usePostsQuery } from \"../../config/graphql\";\n\nconst Posts = () => {\n  const { data, error, loading } = usePostsQuery();\n\n  const posts = data?.posts?.map((post: any) => (\n    <div key={post?.id}>\n      <h2>{post?.title}</h2>\n      <p>\n        {post?.author.firstName} {post.author.lastName}\n      </p>\n      <p>{post?.createdAt}</p>\n      <p>{post?.content}</p>\n    </div>\n  ));\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  if (error || !data) {\n    console.log(error?.message);\n    return <div>Error...</div>;\n  }\n\n  return (\n    <div>\n      <br />\n      <div>{posts}</div>\n      {console.log(data.posts)}\n    </div>\n  );\n};\n\nexport default Posts;\n","import React from \"react\";\nimport { gql, useApolloClient } from \"@apollo/client\";\nimport Cookie from \"js-cookie\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMeQuery } from \"../../config/graphql\";\nimport Posts from \"../Posts\";\nimport checkAuth from \"../User/hooks/checkAuth\";\nimport { Page } from \"../../components/Page\";\n\nconst Dashboard = () => {\n  const client = useApolloClient();\n  const query = gql`\n    query me {\n      me {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  `;\n  const data = client.readQuery({ query });\n  console.log(\"User data: \" + data);\n  return (\n    <Page>\n      <Posts />\n    </Page>\n  );\n};\n\nexport default Dashboard;\n"]}